//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./HBase_typesV1');
//HELPER FUNCTIONS AND STRUCTURES

Hbase_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_enableTable_args.prototype = {};
Hbase_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_enableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_enableTable_result.prototype = {};
Hbase_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_disableTable_args.prototype = {};
Hbase_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_disableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_disableTable_result.prototype = {};
Hbase_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_isTableEnabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_isTableEnabled_args.prototype = {};
Hbase_isTableEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_isTableEnabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_isTableEnabled_result.prototype = {};
Hbase_isTableEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_compact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_compact_args.prototype = {};
Hbase_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeString(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_compact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_compact_result.prototype = {};
Hbase_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_majorCompact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_majorCompact_args.prototype = {};
Hbase_majorCompact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeString(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_majorCompact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_majorCompact_result.prototype = {};
Hbase_majorCompact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableNames_args = function(args) {
};
Hbase_getTableNames_args.prototype = {};
Hbase_getTableNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableNames_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getTableNames_result.prototype = {};
Hbase_getTableNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getColumnDescriptors_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getColumnDescriptors_args.prototype = {};
Hbase_getColumnDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getColumnDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getColumnDescriptors_result.prototype = {};
Hbase_getColumnDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size34 = 0;
        var _rtmp338;
        this.success = {};
        var _ktype35 = 0;
        var _vtype36 = 0;
        _rtmp338 = input.readMapBegin();
        _ktype35 = _rtmp338.ktype;
        _vtype36 = _rtmp338.vtype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var key40 = null;
          var val41 = null;
          key40 = input.readString();
          val41 = new ttypes.ColumnDescriptor();
          val41.read(input);
          this.success[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter42 in this.success)
    {
      if (this.success.hasOwnProperty(kiter42))
      {
        var viter43 = this.success[kiter42];
        output.writeString(kiter42);
        viter43.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableRegions_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getTableRegions_args.prototype = {};
Hbase_getTableRegions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableRegions_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getTableRegions_result.prototype = {};
Hbase_getTableRegions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.success = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new ttypes.TRegionInfo();
          elem50.read(input);
          this.success.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter51 in this.success)
    {
      if (this.success.hasOwnProperty(iter51))
      {
        iter51 = this.success[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_createTable_args = function(args) {
  this.tableName = null;
  this.columnFamilies = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.columnFamilies !== undefined) {
      this.columnFamilies = args.columnFamilies;
    }
  }
};
Hbase_createTable_args.prototype = {};
Hbase_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.columnFamilies = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new ttypes.ColumnDescriptor();
          elem58.read(input);
          this.columnFamilies.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnFamilies !== null && this.columnFamilies !== undefined) {
    output.writeFieldBegin('columnFamilies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnFamilies.length);
    for (var iter59 in this.columnFamilies)
    {
      if (this.columnFamilies.hasOwnProperty(iter59))
      {
        iter59 = this.columnFamilies[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_createTable_result = function(args) {
  this.io = null;
  this.ia = null;
  this.exist = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExists) {
    this.exist = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
    if (args.exist !== undefined) {
      this.exist = args.exist;
    }
  }
};
Hbase_createTable_result.prototype = {};
Hbase_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.exist = new ttypes.AlreadyExists();
        this.exist.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.exist !== null && this.exist !== undefined) {
    output.writeFieldBegin('exist', Thrift.Type.STRUCT, 3);
    this.exist.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_deleteTable_args.prototype = {};
Hbase_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteTable_result.prototype = {};
Hbase_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_get_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_get_args.prototype = {};
Hbase_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size60 = 0;
        var _rtmp364;
        this.attributes = {};
        var _ktype61 = 0;
        var _vtype62 = 0;
        _rtmp364 = input.readMapBegin();
        _ktype61 = _rtmp364.ktype;
        _vtype62 = _rtmp364.vtype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var key66 = null;
          var val67 = null;
          key66 = input.readString();
          val67 = input.readString();
          this.attributes[key66] = val67;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter68 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter68))
      {
        var viter69 = this.attributes[kiter68];
        output.writeString(kiter68);
        output.writeString(viter69);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_get_result.prototype = {};
Hbase_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.success = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new ttypes.TCell();
          elem76.read(input);
          this.success.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter77 in this.success)
    {
      if (this.success.hasOwnProperty(iter77))
      {
        iter77 = this.success[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVer_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.numVersions !== undefined) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getVer_args.prototype = {};
Hbase_getVer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size78 = 0;
        var _rtmp382;
        this.attributes = {};
        var _ktype79 = 0;
        var _vtype80 = 0;
        _rtmp382 = input.readMapBegin();
        _ktype79 = _rtmp382.ktype;
        _vtype80 = _rtmp382.vtype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var key84 = null;
          var val85 = null;
          key84 = input.readString();
          val85 = input.readString();
          this.attributes[key84] = val85;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 4);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter86 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter86))
      {
        var viter87 = this.attributes[kiter86];
        output.writeString(kiter86);
        output.writeString(viter87);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVer_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getVer_result.prototype = {};
Hbase_getVer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.TCell();
          elem94.read(input);
          this.success.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVerTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.numVersions !== undefined) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getVerTs_args.prototype = {};
Hbase_getVerTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size96 = 0;
        var _rtmp3100;
        this.attributes = {};
        var _ktype97 = 0;
        var _vtype98 = 0;
        _rtmp3100 = input.readMapBegin();
        _ktype97 = _rtmp3100.ktype;
        _vtype98 = _rtmp3100.vtype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var key102 = null;
          var val103 = null;
          key102 = input.readString();
          val103 = input.readString();
          this.attributes[key102] = val103;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 5);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter104 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter104))
      {
        var viter105 = this.attributes[kiter104];
        output.writeString(kiter104);
        output.writeString(viter105);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVerTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getVerTs_result.prototype = {};
Hbase_getVerTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.success = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new ttypes.TCell();
          elem112.read(input);
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter113 in this.success)
    {
      if (this.success.hasOwnProperty(iter113))
      {
        iter113 = this.success[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRow_args.prototype = {};
Hbase_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size114 = 0;
        var _rtmp3118;
        this.attributes = {};
        var _ktype115 = 0;
        var _vtype116 = 0;
        _rtmp3118 = input.readMapBegin();
        _ktype115 = _rtmp3118.ktype;
        _vtype116 = _rtmp3118.vtype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var key120 = null;
          var val121 = null;
          key120 = input.readString();
          val121 = input.readString();
          this.attributes[key120] = val121;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter122 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter122))
      {
        var viter123 = this.attributes[kiter122];
        output.writeString(kiter122);
        output.writeString(viter123);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRow_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRow_result.prototype = {};
Hbase_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.TRowResult();
          elem130.read(input);
          this.success.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter131 in this.success)
    {
      if (this.success.hasOwnProperty(iter131))
      {
        iter131 = this.success[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumns_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowWithColumns_args.prototype = {};
Hbase_getRowWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.columns = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = input.readString();
          this.columns.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size139 = 0;
        var _rtmp3143;
        this.attributes = {};
        var _ktype140 = 0;
        var _vtype141 = 0;
        _rtmp3143 = input.readMapBegin();
        _ktype140 = _rtmp3143.ktype;
        _vtype141 = _rtmp3143.vtype;
        _size139 = _rtmp3143.size;
        for (var _i144 = 0; _i144 < _size139; ++_i144)
        {
          var key145 = null;
          var val146 = null;
          key145 = input.readString();
          val146 = input.readString();
          this.attributes[key145] = val146;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter147 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter147))
      {
        iter147 = this.columns[iter147];
        output.writeString(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter148 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter148))
      {
        var viter149 = this.attributes[kiter148];
        output.writeString(kiter148);
        output.writeString(viter149);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumns_result.prototype = {};
Hbase_getRowWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.success = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = new ttypes.TRowResult();
          elem156.read(input);
          this.success.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter157 in this.success)
    {
      if (this.success.hasOwnProperty(iter157))
      {
        iter157 = this.success[iter157];
        iter157.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowTs_args.prototype = {};
Hbase_getRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size158 = 0;
        var _rtmp3162;
        this.attributes = {};
        var _ktype159 = 0;
        var _vtype160 = 0;
        _rtmp3162 = input.readMapBegin();
        _ktype159 = _rtmp3162.ktype;
        _vtype160 = _rtmp3162.vtype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var key164 = null;
          var val165 = null;
          key164 = input.readString();
          val165 = input.readString();
          this.attributes[key164] = val165;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter166 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter166))
      {
        var viter167 = this.attributes[kiter166];
        output.writeString(kiter166);
        output.writeString(viter167);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowTs_result.prototype = {};
Hbase_getRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.success = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new ttypes.TRowResult();
          elem174.read(input);
          this.success.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter175 in this.success)
    {
      if (this.success.hasOwnProperty(iter175))
      {
        iter175 = this.success[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowWithColumnsTs_args.prototype = {};
Hbase_getRowWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.columns = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readString();
          this.columns.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size183 = 0;
        var _rtmp3187;
        this.attributes = {};
        var _ktype184 = 0;
        var _vtype185 = 0;
        _rtmp3187 = input.readMapBegin();
        _ktype184 = _rtmp3187.ktype;
        _vtype185 = _rtmp3187.vtype;
        _size183 = _rtmp3187.size;
        for (var _i188 = 0; _i188 < _size183; ++_i188)
        {
          var key189 = null;
          var val190 = null;
          key189 = input.readString();
          val190 = input.readString();
          this.attributes[key189] = val190;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter191 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter191))
      {
        iter191 = this.columns[iter191];
        output.writeString(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter192 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter192))
      {
        var viter193 = this.attributes[kiter192];
        output.writeString(kiter192);
        output.writeString(viter193);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumnsTs_result.prototype = {};
Hbase_getRowWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.success = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = new ttypes.TRowResult();
          elem200.read(input);
          this.success.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter201 in this.success)
    {
      if (this.success.hasOwnProperty(iter201))
      {
        iter201 = this.success[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRows_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRows_args.prototype = {};
Hbase_getRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.rows = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = input.readString();
          this.rows.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size209 = 0;
        var _rtmp3213;
        this.attributes = {};
        var _ktype210 = 0;
        var _vtype211 = 0;
        _rtmp3213 = input.readMapBegin();
        _ktype210 = _rtmp3213.ktype;
        _vtype211 = _rtmp3213.vtype;
        _size209 = _rtmp3213.size;
        for (var _i214 = 0; _i214 < _size209; ++_i214)
        {
          var key215 = null;
          var val216 = null;
          key215 = input.readString();
          val216 = input.readString();
          this.attributes[key215] = val216;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter217 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter217))
      {
        iter217 = this.rows[iter217];
        output.writeString(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter218 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter218))
      {
        var viter219 = this.attributes[kiter218];
        output.writeString(kiter218);
        output.writeString(viter219);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRows_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRows_result.prototype = {};
Hbase_getRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.success = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = new ttypes.TRowResult();
          elem226.read(input);
          this.success.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter227 in this.success)
    {
      if (this.success.hasOwnProperty(iter227))
      {
        iter227 = this.success[iter227];
        iter227.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumns_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsWithColumns_args.prototype = {};
Hbase_getRowsWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size228 = 0;
        var _rtmp3232;
        this.rows = [];
        var _etype231 = 0;
        _rtmp3232 = input.readListBegin();
        _etype231 = _rtmp3232.etype;
        _size228 = _rtmp3232.size;
        for (var _i233 = 0; _i233 < _size228; ++_i233)
        {
          var elem234 = null;
          elem234 = input.readString();
          this.rows.push(elem234);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size235 = 0;
        var _rtmp3239;
        this.columns = [];
        var _etype238 = 0;
        _rtmp3239 = input.readListBegin();
        _etype238 = _rtmp3239.etype;
        _size235 = _rtmp3239.size;
        for (var _i240 = 0; _i240 < _size235; ++_i240)
        {
          var elem241 = null;
          elem241 = input.readString();
          this.columns.push(elem241);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size242 = 0;
        var _rtmp3246;
        this.attributes = {};
        var _ktype243 = 0;
        var _vtype244 = 0;
        _rtmp3246 = input.readMapBegin();
        _ktype243 = _rtmp3246.ktype;
        _vtype244 = _rtmp3246.vtype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var key248 = null;
          var val249 = null;
          key248 = input.readString();
          val249 = input.readString();
          this.attributes[key248] = val249;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter250 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter250))
      {
        iter250 = this.rows[iter250];
        output.writeString(iter250);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter251 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter251))
      {
        iter251 = this.columns[iter251];
        output.writeString(iter251);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter252 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter252))
      {
        var viter253 = this.attributes[kiter252];
        output.writeString(kiter252);
        output.writeString(viter253);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumns_result.prototype = {};
Hbase_getRowsWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.success = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = new ttypes.TRowResult();
          elem260.read(input);
          this.success.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter261 in this.success)
    {
      if (this.success.hasOwnProperty(iter261))
      {
        iter261 = this.success[iter261];
        iter261.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsTs_args.prototype = {};
Hbase_getRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size262 = 0;
        var _rtmp3266;
        this.rows = [];
        var _etype265 = 0;
        _rtmp3266 = input.readListBegin();
        _etype265 = _rtmp3266.etype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var elem268 = null;
          elem268 = input.readString();
          this.rows.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size269 = 0;
        var _rtmp3273;
        this.attributes = {};
        var _ktype270 = 0;
        var _vtype271 = 0;
        _rtmp3273 = input.readMapBegin();
        _ktype270 = _rtmp3273.ktype;
        _vtype271 = _rtmp3273.vtype;
        _size269 = _rtmp3273.size;
        for (var _i274 = 0; _i274 < _size269; ++_i274)
        {
          var key275 = null;
          var val276 = null;
          key275 = input.readString();
          val276 = input.readString();
          this.attributes[key275] = val276;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter277 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter277))
      {
        iter277 = this.rows[iter277];
        output.writeString(iter277);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter278 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter278))
      {
        var viter279 = this.attributes[kiter278];
        output.writeString(kiter278);
        output.writeString(viter279);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsTs_result.prototype = {};
Hbase_getRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.success = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = new ttypes.TRowResult();
          elem286.read(input);
          this.success.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter287 in this.success)
    {
      if (this.success.hasOwnProperty(iter287))
      {
        iter287 = this.success[iter287];
        iter287.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsWithColumnsTs_args.prototype = {};
Hbase_getRowsWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.rows = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readString();
          this.rows.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size295 = 0;
        var _rtmp3299;
        this.columns = [];
        var _etype298 = 0;
        _rtmp3299 = input.readListBegin();
        _etype298 = _rtmp3299.etype;
        _size295 = _rtmp3299.size;
        for (var _i300 = 0; _i300 < _size295; ++_i300)
        {
          var elem301 = null;
          elem301 = input.readString();
          this.columns.push(elem301);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size302 = 0;
        var _rtmp3306;
        this.attributes = {};
        var _ktype303 = 0;
        var _vtype304 = 0;
        _rtmp3306 = input.readMapBegin();
        _ktype303 = _rtmp3306.ktype;
        _vtype304 = _rtmp3306.vtype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var key308 = null;
          var val309 = null;
          key308 = input.readString();
          val309 = input.readString();
          this.attributes[key308] = val309;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter310 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter310))
      {
        iter310 = this.rows[iter310];
        output.writeString(iter310);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter311 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter311))
      {
        iter311 = this.columns[iter311];
        output.writeString(iter311);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter312 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter312))
      {
        var viter313 = this.attributes[kiter312];
        output.writeString(kiter312);
        output.writeString(viter313);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumnsTs_result.prototype = {};
Hbase_getRowsWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.success = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = new ttypes.TRowResult();
          elem320.read(input);
          this.success.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter321 in this.success)
    {
      if (this.success.hasOwnProperty(iter321))
      {
        iter321 = this.success[iter321];
        iter321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRow_args.prototype = {};
Hbase_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.mutations = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.Mutation();
          elem328.read(input);
          this.mutations.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size329 = 0;
        var _rtmp3333;
        this.attributes = {};
        var _ktype330 = 0;
        var _vtype331 = 0;
        _rtmp3333 = input.readMapBegin();
        _ktype330 = _rtmp3333.ktype;
        _vtype331 = _rtmp3333.vtype;
        _size329 = _rtmp3333.size;
        for (var _i334 = 0; _i334 < _size329; ++_i334)
        {
          var key335 = null;
          var val336 = null;
          key335 = input.readString();
          val336 = input.readString();
          this.attributes[key335] = val336;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter337 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter337))
      {
        iter337 = this.mutations[iter337];
        iter337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter338 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter338))
      {
        var viter339 = this.attributes[kiter338];
        output.writeString(kiter338);
        output.writeString(viter339);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRow_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRow_result.prototype = {};
Hbase_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRowTs_args.prototype = {};
Hbase_mutateRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.mutations = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = new ttypes.Mutation();
          elem346.read(input);
          this.mutations.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size347 = 0;
        var _rtmp3351;
        this.attributes = {};
        var _ktype348 = 0;
        var _vtype349 = 0;
        _rtmp3351 = input.readMapBegin();
        _ktype348 = _rtmp3351.ktype;
        _vtype349 = _rtmp3351.vtype;
        _size347 = _rtmp3351.size;
        for (var _i352 = 0; _i352 < _size347; ++_i352)
        {
          var key353 = null;
          var val354 = null;
          key353 = input.readString();
          val354 = input.readString();
          this.attributes[key353] = val354;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter355 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter355))
      {
        iter355 = this.mutations[iter355];
        iter355.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter356 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter356))
      {
        var viter357 = this.attributes[kiter356];
        output.writeString(kiter356);
        output.writeString(viter357);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowTs_result.prototype = {};
Hbase_mutateRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRows_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined) {
      this.rowBatches = args.rowBatches;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRows_args.prototype = {};
Hbase_mutateRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.rowBatches = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = new ttypes.BatchMutation();
          elem364.read(input);
          this.rowBatches.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size365 = 0;
        var _rtmp3369;
        this.attributes = {};
        var _ktype366 = 0;
        var _vtype367 = 0;
        _rtmp3369 = input.readMapBegin();
        _ktype366 = _rtmp3369.ktype;
        _vtype367 = _rtmp3369.vtype;
        _size365 = _rtmp3369.size;
        for (var _i370 = 0; _i370 < _size365; ++_i370)
        {
          var key371 = null;
          var val372 = null;
          key371 = input.readString();
          val372 = input.readString();
          this.attributes[key371] = val372;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter373 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter373))
      {
        iter373 = this.rowBatches[iter373];
        iter373.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter374 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter374))
      {
        var viter375 = this.attributes[kiter374];
        output.writeString(kiter374);
        output.writeString(viter375);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRows_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRows_result.prototype = {};
Hbase_mutateRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowsTs_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined) {
      this.rowBatches = args.rowBatches;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRowsTs_args.prototype = {};
Hbase_mutateRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size376 = 0;
        var _rtmp3380;
        this.rowBatches = [];
        var _etype379 = 0;
        _rtmp3380 = input.readListBegin();
        _etype379 = _rtmp3380.etype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var elem382 = null;
          elem382 = new ttypes.BatchMutation();
          elem382.read(input);
          this.rowBatches.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size383 = 0;
        var _rtmp3387;
        this.attributes = {};
        var _ktype384 = 0;
        var _vtype385 = 0;
        _rtmp3387 = input.readMapBegin();
        _ktype384 = _rtmp3387.ktype;
        _vtype385 = _rtmp3387.vtype;
        _size383 = _rtmp3387.size;
        for (var _i388 = 0; _i388 < _size383; ++_i388)
        {
          var key389 = null;
          var val390 = null;
          key389 = input.readString();
          val390 = input.readString();
          this.attributes[key389] = val390;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter391 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter391))
      {
        iter391 = this.rowBatches[iter391];
        iter391.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter392 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter392))
      {
        var viter393 = this.attributes[kiter392];
        output.writeString(kiter392);
        output.writeString(viter393);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowsTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowsTs_result.prototype = {};
Hbase_mutateRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_atomicIncrement_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Hbase_atomicIncrement_args.prototype = {};
Hbase_atomicIncrement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_atomicIncrement_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_atomicIncrement_result.prototype = {};
Hbase_atomicIncrement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAll_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAll_args.prototype = {};
Hbase_deleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size394 = 0;
        var _rtmp3398;
        this.attributes = {};
        var _ktype395 = 0;
        var _vtype396 = 0;
        _rtmp3398 = input.readMapBegin();
        _ktype395 = _rtmp3398.ktype;
        _vtype396 = _rtmp3398.vtype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var key400 = null;
          var val401 = null;
          key400 = input.readString();
          val401 = input.readString();
          this.attributes[key400] = val401;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter402 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter402))
      {
        var viter403 = this.attributes[kiter402];
        output.writeString(kiter402);
        output.writeString(viter403);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAll_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAll_result.prototype = {};
Hbase_deleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllTs_args.prototype = {};
Hbase_deleteAllTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size404 = 0;
        var _rtmp3408;
        this.attributes = {};
        var _ktype405 = 0;
        var _vtype406 = 0;
        _rtmp3408 = input.readMapBegin();
        _ktype405 = _rtmp3408.ktype;
        _vtype406 = _rtmp3408.vtype;
        _size404 = _rtmp3408.size;
        for (var _i409 = 0; _i409 < _size404; ++_i409)
        {
          var key410 = null;
          var val411 = null;
          key410 = input.readString();
          val411 = input.readString();
          this.attributes[key410] = val411;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter412 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter412))
      {
        var viter413 = this.attributes[kiter412];
        output.writeString(kiter412);
        output.writeString(viter413);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllTs_result.prototype = {};
Hbase_deleteAllTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllRow_args.prototype = {};
Hbase_deleteAllRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size414 = 0;
        var _rtmp3418;
        this.attributes = {};
        var _ktype415 = 0;
        var _vtype416 = 0;
        _rtmp3418 = input.readMapBegin();
        _ktype415 = _rtmp3418.ktype;
        _vtype416 = _rtmp3418.vtype;
        _size414 = _rtmp3418.size;
        for (var _i419 = 0; _i419 < _size414; ++_i419)
        {
          var key420 = null;
          var val421 = null;
          key420 = input.readString();
          val421 = input.readString();
          this.attributes[key420] = val421;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter422 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter422))
      {
        var viter423 = this.attributes[kiter422];
        output.writeString(kiter422);
        output.writeString(viter423);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRow_result.prototype = {};
Hbase_deleteAllRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_increment_args = function(args) {
  this.increment = null;
  if (args) {
    if (args.increment !== undefined) {
      this.increment = args.increment;
    }
  }
};
Hbase_increment_args.prototype = {};
Hbase_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.increment = new ttypes.TIncrement();
        this.increment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_args');
  if (this.increment !== null && this.increment !== undefined) {
    output.writeFieldBegin('increment', Thrift.Type.STRUCT, 1);
    this.increment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_increment_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_increment_result.prototype = {};
Hbase_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_incrementRows_args = function(args) {
  this.increments = null;
  if (args) {
    if (args.increments !== undefined) {
      this.increments = args.increments;
    }
  }
};
Hbase_incrementRows_args.prototype = {};
Hbase_incrementRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size424 = 0;
        var _rtmp3428;
        this.increments = [];
        var _etype427 = 0;
        _rtmp3428 = input.readListBegin();
        _etype427 = _rtmp3428.etype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          var elem430 = null;
          elem430 = new ttypes.TIncrement();
          elem430.read(input);
          this.increments.push(elem430);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_args');
  if (this.increments !== null && this.increments !== undefined) {
    output.writeFieldBegin('increments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.increments.length);
    for (var iter431 in this.increments)
    {
      if (this.increments.hasOwnProperty(iter431))
      {
        iter431 = this.increments[iter431];
        iter431.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_incrementRows_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_incrementRows_result.prototype = {};
Hbase_incrementRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllRowTs_args.prototype = {};
Hbase_deleteAllRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size432 = 0;
        var _rtmp3436;
        this.attributes = {};
        var _ktype433 = 0;
        var _vtype434 = 0;
        _rtmp3436 = input.readMapBegin();
        _ktype433 = _rtmp3436.ktype;
        _vtype434 = _rtmp3436.vtype;
        _size432 = _rtmp3436.size;
        for (var _i437 = 0; _i437 < _size432; ++_i437)
        {
          var key438 = null;
          var val439 = null;
          key438 = input.readString();
          val439 = input.readString();
          this.attributes[key438] = val439;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter440 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter440))
      {
        var viter441 = this.attributes[kiter440];
        output.writeString(kiter440);
        output.writeString(viter441);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRowTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRowTs_result.prototype = {};
Hbase_deleteAllRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args = function(args) {
  this.tableName = null;
  this.scan = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.scan !== undefined) {
      this.scan = args.scan;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithScan_args.prototype = {};
Hbase_scannerOpenWithScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size442 = 0;
        var _rtmp3446;
        this.attributes = {};
        var _ktype443 = 0;
        var _vtype444 = 0;
        _rtmp3446 = input.readMapBegin();
        _ktype443 = _rtmp3446.ktype;
        _vtype444 = _rtmp3446.vtype;
        _size442 = _rtmp3446.size;
        for (var _i447 = 0; _i447 < _size442; ++_i447)
        {
          var key448 = null;
          var val449 = null;
          key448 = input.readString();
          val449 = input.readString();
          this.attributes[key448] = val449;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter450 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter450))
      {
        var viter451 = this.attributes[kiter450];
        output.writeString(kiter450);
        output.writeString(viter451);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithScan_result.prototype = {};
Hbase_scannerOpenWithScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpen_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpen_args.prototype = {};
Hbase_scannerOpen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.columns = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = input.readString();
          this.columns.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size459 = 0;
        var _rtmp3463;
        this.attributes = {};
        var _ktype460 = 0;
        var _vtype461 = 0;
        _rtmp3463 = input.readMapBegin();
        _ktype460 = _rtmp3463.ktype;
        _vtype461 = _rtmp3463.vtype;
        _size459 = _rtmp3463.size;
        for (var _i464 = 0; _i464 < _size459; ++_i464)
        {
          var key465 = null;
          var val466 = null;
          key465 = input.readString();
          val466 = input.readString();
          this.attributes[key465] = val466;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter467 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter467))
      {
        iter467 = this.columns[iter467];
        output.writeString(iter467);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter468 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter468))
      {
        var viter469 = this.attributes[kiter468];
        output.writeString(kiter468);
        output.writeString(viter469);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpen_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpen_result.prototype = {};
Hbase_scannerOpen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithStop_args.prototype = {};
Hbase_scannerOpenWithStop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size470 = 0;
        var _rtmp3474;
        this.columns = [];
        var _etype473 = 0;
        _rtmp3474 = input.readListBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = input.readString();
          this.columns.push(elem476);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size477 = 0;
        var _rtmp3481;
        this.attributes = {};
        var _ktype478 = 0;
        var _vtype479 = 0;
        _rtmp3481 = input.readMapBegin();
        _ktype478 = _rtmp3481.ktype;
        _vtype479 = _rtmp3481.vtype;
        _size477 = _rtmp3481.size;
        for (var _i482 = 0; _i482 < _size477; ++_i482)
        {
          var key483 = null;
          var val484 = null;
          key483 = input.readString();
          val484 = input.readString();
          this.attributes[key483] = val484;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeString(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter485 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter485))
      {
        iter485 = this.columns[iter485];
        output.writeString(iter485);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter486 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter486))
      {
        var viter487 = this.attributes[kiter486];
        output.writeString(kiter486);
        output.writeString(viter487);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStop_result.prototype = {};
Hbase_scannerOpenWithStop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args = function(args) {
  this.tableName = null;
  this.startAndPrefix = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startAndPrefix !== undefined) {
      this.startAndPrefix = args.startAndPrefix;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithPrefix_args.prototype = {};
Hbase_scannerOpenWithPrefix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startAndPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size488 = 0;
        var _rtmp3492;
        this.columns = [];
        var _etype491 = 0;
        _rtmp3492 = input.readListBegin();
        _etype491 = _rtmp3492.etype;
        _size488 = _rtmp3492.size;
        for (var _i493 = 0; _i493 < _size488; ++_i493)
        {
          var elem494 = null;
          elem494 = input.readString();
          this.columns.push(elem494);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size495 = 0;
        var _rtmp3499;
        this.attributes = {};
        var _ktype496 = 0;
        var _vtype497 = 0;
        _rtmp3499 = input.readMapBegin();
        _ktype496 = _rtmp3499.ktype;
        _vtype497 = _rtmp3499.vtype;
        _size495 = _rtmp3499.size;
        for (var _i500 = 0; _i500 < _size495; ++_i500)
        {
          var key501 = null;
          var val502 = null;
          key501 = input.readString();
          val502 = input.readString();
          this.attributes[key501] = val502;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startAndPrefix !== null && this.startAndPrefix !== undefined) {
    output.writeFieldBegin('startAndPrefix', Thrift.Type.STRING, 2);
    output.writeString(this.startAndPrefix);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter503 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter503))
      {
        iter503 = this.columns[iter503];
        output.writeString(iter503);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter504 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter504))
      {
        var viter505 = this.attributes[kiter504];
        output.writeString(kiter504);
        output.writeString(viter505);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithPrefix_result.prototype = {};
Hbase_scannerOpenWithPrefix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenTs_args.prototype = {};
Hbase_scannerOpenTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size506 = 0;
        var _rtmp3510;
        this.columns = [];
        var _etype509 = 0;
        _rtmp3510 = input.readListBegin();
        _etype509 = _rtmp3510.etype;
        _size506 = _rtmp3510.size;
        for (var _i511 = 0; _i511 < _size506; ++_i511)
        {
          var elem512 = null;
          elem512 = input.readString();
          this.columns.push(elem512);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size513 = 0;
        var _rtmp3517;
        this.attributes = {};
        var _ktype514 = 0;
        var _vtype515 = 0;
        _rtmp3517 = input.readMapBegin();
        _ktype514 = _rtmp3517.ktype;
        _vtype515 = _rtmp3517.vtype;
        _size513 = _rtmp3517.size;
        for (var _i518 = 0; _i518 < _size513; ++_i518)
        {
          var key519 = null;
          var val520 = null;
          key519 = input.readString();
          val520 = input.readString();
          this.attributes[key519] = val520;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter521 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter521))
      {
        iter521 = this.columns[iter521];
        output.writeString(iter521);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter522 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter522))
      {
        var viter523 = this.attributes[kiter522];
        output.writeString(kiter522);
        output.writeString(viter523);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenTs_result.prototype = {};
Hbase_scannerOpenTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithStopTs_args.prototype = {};
Hbase_scannerOpenWithStopTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size524 = 0;
        var _rtmp3528;
        this.columns = [];
        var _etype527 = 0;
        _rtmp3528 = input.readListBegin();
        _etype527 = _rtmp3528.etype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          var elem530 = null;
          elem530 = input.readString();
          this.columns.push(elem530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size531 = 0;
        var _rtmp3535;
        this.attributes = {};
        var _ktype532 = 0;
        var _vtype533 = 0;
        _rtmp3535 = input.readMapBegin();
        _ktype532 = _rtmp3535.ktype;
        _vtype533 = _rtmp3535.vtype;
        _size531 = _rtmp3535.size;
        for (var _i536 = 0; _i536 < _size531; ++_i536)
        {
          var key537 = null;
          var val538 = null;
          key537 = input.readString();
          val538 = input.readString();
          this.attributes[key537] = val538;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeString(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter539 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter539))
      {
        iter539 = this.columns[iter539];
        output.writeString(iter539);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter540 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter540))
      {
        var viter541 = this.attributes[kiter540];
        output.writeString(kiter540);
        output.writeString(viter541);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStopTs_result.prototype = {};
Hbase_scannerOpenWithStopTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGet_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Hbase_scannerGet_args.prototype = {};
Hbase_scannerGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGet_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGet_result.prototype = {};
Hbase_scannerGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size542 = 0;
        var _rtmp3546;
        this.success = [];
        var _etype545 = 0;
        _rtmp3546 = input.readListBegin();
        _etype545 = _rtmp3546.etype;
        _size542 = _rtmp3546.size;
        for (var _i547 = 0; _i547 < _size542; ++_i547)
        {
          var elem548 = null;
          elem548 = new ttypes.TRowResult();
          elem548.read(input);
          this.success.push(elem548);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter549 in this.success)
    {
      if (this.success.hasOwnProperty(iter549))
      {
        iter549 = this.success[iter549];
        iter549.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGetList_args = function(args) {
  this.id = null;
  this.nbRows = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.nbRows !== undefined) {
      this.nbRows = args.nbRows;
    }
  }
};
Hbase_scannerGetList_args.prototype = {};
Hbase_scannerGetList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nbRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.nbRows !== null && this.nbRows !== undefined) {
    output.writeFieldBegin('nbRows', Thrift.Type.I32, 2);
    output.writeI32(this.nbRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGetList_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGetList_result.prototype = {};
Hbase_scannerGetList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size550 = 0;
        var _rtmp3554;
        this.success = [];
        var _etype553 = 0;
        _rtmp3554 = input.readListBegin();
        _etype553 = _rtmp3554.etype;
        _size550 = _rtmp3554.size;
        for (var _i555 = 0; _i555 < _size550; ++_i555)
        {
          var elem556 = null;
          elem556 = new ttypes.TRowResult();
          elem556.read(input);
          this.success.push(elem556);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter557 in this.success)
    {
      if (this.success.hasOwnProperty(iter557))
      {
        iter557 = this.success[iter557];
        iter557.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerClose_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Hbase_scannerClose_args.prototype = {};
Hbase_scannerClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerClose_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerClose_result.prototype = {};
Hbase_scannerClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowOrBefore_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.family = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
  }
};
Hbase_getRowOrBefore_args.prototype = {};
Hbase_getRowOrBefore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowOrBefore_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowOrBefore_result.prototype = {};
Hbase_getRowOrBefore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size558 = 0;
        var _rtmp3562;
        this.success = [];
        var _etype561 = 0;
        _rtmp3562 = input.readListBegin();
        _etype561 = _rtmp3562.etype;
        _size558 = _rtmp3562.size;
        for (var _i563 = 0; _i563 < _size558; ++_i563)
        {
          var elem564 = null;
          elem564 = new ttypes.TCell();
          elem564.read(input);
          this.success.push(elem564);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter565 in this.success)
    {
      if (this.success.hasOwnProperty(iter565))
      {
        iter565 = this.success[iter565];
        iter565.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRegionInfo_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
  }
};
Hbase_getRegionInfo_args.prototype = {};
Hbase_getRegionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRegionInfo_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRegionInfo_result.prototype = {};
Hbase_getRegionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRegionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HbaseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
HbaseClient.prototype = {};
HbaseClient.prototype.enableTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_enableTable(tableName);
};

HbaseClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_enableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.disableTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_disableTable(tableName);
};

HbaseClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_disableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.isTableEnabled = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_isTableEnabled(tableName);
};

HbaseClient.prototype.send_isTableEnabled = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_isTableEnabled_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_isTableEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableEnabled failed: unknown result');
};
HbaseClient.prototype.compact = function(tableNameOrRegionName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_compact(tableNameOrRegionName);
};

HbaseClient.prototype.send_compact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_compact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_compact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.majorCompact = function(tableNameOrRegionName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_majorCompact(tableNameOrRegionName);
};

HbaseClient.prototype.send_majorCompact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('majorCompact', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_majorCompact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_majorCompact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_majorCompact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.getTableNames = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTableNames();
};

HbaseClient.prototype.send_getTableNames = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableNames', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getTableNames_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNames failed: unknown result');
};
HbaseClient.prototype.getColumnDescriptors = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getColumnDescriptors(tableName);
};

HbaseClient.prototype.send_getColumnDescriptors = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getColumnDescriptors', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getColumnDescriptors_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getColumnDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getColumnDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumnDescriptors failed: unknown result');
};
HbaseClient.prototype.getTableRegions = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTableRegions(tableName);
};

HbaseClient.prototype.send_getTableRegions = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableRegions', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getTableRegions_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableRegions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableRegions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableRegions failed: unknown result');
};
HbaseClient.prototype.createTable = function(tableName, columnFamilies, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createTable(tableName, columnFamilies);
};

HbaseClient.prototype.send_createTable = function(tableName, columnFamilies) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_createTable_args();
  args.tableName = tableName;
  args.columnFamilies = columnFamilies;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.exist) {
    return callback(result.exist);
  }
  callback(null)
};
HbaseClient.prototype.deleteTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteTable(tableName);
};

HbaseClient.prototype.send_deleteTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.get = function(tableName, row, column, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get(tableName, row, column, attributes);
};

HbaseClient.prototype.send_get = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_get_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;  
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
HbaseClient.prototype.getVer = function(tableName, row, column, numVersions, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getVer(tableName, row, column, numVersions, attributes);
};

HbaseClient.prototype.send_getVer = function(tableName, row, column, numVersions, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVer', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getVer_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.numVersions = numVersions;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVer failed: unknown result');
};
HbaseClient.prototype.getVerTs = function(tableName, row, column, timestamp, numVersions, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getVerTs(tableName, row, column, timestamp, numVersions, attributes);
};

HbaseClient.prototype.send_getVerTs = function(tableName, row, column, timestamp, numVersions, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVerTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getVerTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.numVersions = numVersions;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVerTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVerTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVerTs failed: unknown result');
};
HbaseClient.prototype.getRow = function(tableName, row, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRow(tableName, row, attributes);
};

HbaseClient.prototype.send_getRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRow_args();
  args.tableName = tableName;
  args.row = row;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};
HbaseClient.prototype.getRowWithColumns = function(tableName, row, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowWithColumns(tableName, row, columns, attributes);
};

HbaseClient.prototype.send_getRowWithColumns = function(tableName, row, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowWithColumns_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowTs = function(tableName, row, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowTs(tableName, row, timestamp, attributes);
};

HbaseClient.prototype.send_getRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowTs failed: unknown result');
};
HbaseClient.prototype.getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowWithColumnsTs(tableName, row, columns, timestamp, attributes);
};

HbaseClient.prototype.send_getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumnsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowWithColumnsTs_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.getRows = function(tableName, rows, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRows(tableName, rows, attributes);
};

HbaseClient.prototype.send_getRows = function(tableName, rows, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRows_args();
  args.tableName = tableName;
  args.rows = rows;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRows failed: unknown result');
};
HbaseClient.prototype.getRowsWithColumns = function(tableName, rows, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowsWithColumns(tableName, rows, columns, attributes);
};

HbaseClient.prototype.send_getRowsWithColumns = function(tableName, rows, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsWithColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowsWithColumns_args();
  args.tableName = tableName;
  args.rows = rows;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowsTs = function(tableName, rows, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowsTs(tableName, rows, timestamp, attributes);
};

HbaseClient.prototype.send_getRowsTs = function(tableName, rows, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowsTs_args();
  args.tableName = tableName;
  args.rows = rows;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsTs failed: unknown result');
};
HbaseClient.prototype.getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes);
};

HbaseClient.prototype.send_getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsWithColumnsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.tableName = tableName;
  args.rows = rows;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.mutateRow = function(tableName, row, mutations, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRow(tableName, row, mutations, attributes);
};

HbaseClient.prototype.send_mutateRow = function(tableName, row, mutations, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRow_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowTs = function(tableName, row, mutations, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRowTs(tableName, row, mutations, timestamp, attributes);
};

HbaseClient.prototype.send_mutateRowTs = function(tableName, row, mutations, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRows = function(tableName, rowBatches, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRows(tableName, rowBatches, attributes);
};

HbaseClient.prototype.send_mutateRows = function(tableName, rowBatches, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRows_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowsTs = function(tableName, rowBatches, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRowsTs(tableName, rowBatches, timestamp, attributes);
};

HbaseClient.prototype.send_mutateRowsTs = function(tableName, rowBatches, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRowsTs_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.atomicIncrement = function(tableName, row, column, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_atomicIncrement(tableName, row, column, value);
};

HbaseClient.prototype.send_atomicIncrement = function(tableName, row, column, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('atomicIncrement', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_atomicIncrement_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_atomicIncrement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_atomicIncrement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('atomicIncrement failed: unknown result');
};
HbaseClient.prototype.deleteAll = function(tableName, row, column, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAll(tableName, row, column, attributes);
};

HbaseClient.prototype.send_deleteAll = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAll_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllTs = function(tableName, row, column, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllTs(tableName, row, column, timestamp, attributes);
};

HbaseClient.prototype.send_deleteAllTs = function(tableName, row, column, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRow = function(tableName, row, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllRow(tableName, row, attributes);
};

HbaseClient.prototype.send_deleteAllRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllRow_args();
  args.tableName = tableName;
  args.row = row;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.increment = function(increment, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_increment(increment);
};

HbaseClient.prototype.send_increment = function(increment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_increment_args();
  args.increment = increment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.incrementRows = function(increments, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_incrementRows(increments);
};

HbaseClient.prototype.send_incrementRows = function(increments) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('incrementRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_incrementRows_args();
  args.increments = increments;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_incrementRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_incrementRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRowTs = function(tableName, row, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllRowTs(tableName, row, timestamp, attributes);
};

HbaseClient.prototype.send_deleteAllRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.scannerOpenWithScan = function(tableName, scan, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithScan(tableName, scan, attributes);
};

HbaseClient.prototype.send_scannerOpenWithScan = function(tableName, scan, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithScan', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithScan_args();
  args.tableName = tableName;
  args.scan = scan;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithScan failed: unknown result');
};
HbaseClient.prototype.scannerOpen = function(tableName, startRow, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpen(tableName, startRow, columns, attributes);
};

HbaseClient.prototype.send_scannerOpen = function(tableName, startRow, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpen_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpen = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpen_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpen failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns, attributes);
};

HbaseClient.prototype.send_scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStop', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithStop_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStop failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes);
};

HbaseClient.prototype.send_scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithPrefix', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.tableName = tableName;
  args.startAndPrefix = startAndPrefix;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithPrefix = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithPrefix_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithPrefix failed: unknown result');
};
HbaseClient.prototype.scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenTs(tableName, startRow, columns, timestamp, attributes);
};

HbaseClient.prototype.send_scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenTs failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes);
};

HbaseClient.prototype.send_scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStopTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStopTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStopTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStopTs failed: unknown result');
};
HbaseClient.prototype.scannerGet = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerGet(id);
};

HbaseClient.prototype.send_scannerGet = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGet', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerGet_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGet failed: unknown result');
};
HbaseClient.prototype.scannerGetList = function(id, nbRows, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerGetList(id, nbRows);
};

HbaseClient.prototype.send_scannerGetList = function(id, nbRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGetList', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerGetList_args();
  args.id = id;
  args.nbRows = nbRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGetList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGetList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGetList failed: unknown result');
};
HbaseClient.prototype.scannerClose = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerClose(id);
};

HbaseClient.prototype.send_scannerClose = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerClose', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerClose_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerClose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerClose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.getRowOrBefore = function(tableName, row, family, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowOrBefore(tableName, row, family);
};

HbaseClient.prototype.send_getRowOrBefore = function(tableName, row, family) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowOrBefore', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowOrBefore_args();
  args.tableName = tableName;
  args.row = row;
  args.family = family;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowOrBefore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowOrBefore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowOrBefore failed: unknown result');
};
HbaseClient.prototype.getRegionInfo = function(row, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegionInfo(row);
};

HbaseClient.prototype.send_getRegionInfo = function(row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegionInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRegionInfo_args();
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRegionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRegionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegionInfo failed: unknown result');
};
HbaseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
HbaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

HbaseProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new Hbase_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.enableTable(args.tableName, function (err, result) {
    var result = new Hbase_enableTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new Hbase_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.disableTable(args.tableName, function (err, result) {
    var result = new Hbase_disableTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new Hbase_isTableEnabled_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.isTableEnabled(args.tableName, function (err, result) {
    var result = new Hbase_isTableEnabled_result((err != null ? err : {success: result}));
    output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new Hbase_compact_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.compact(args.tableNameOrRegionName, function (err, result) {
    var result = new Hbase_compact_result((err != null ? err : {success: result}));
    output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_majorCompact = function(seqid, input, output) {
  var args = new Hbase_majorCompact_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.majorCompact(args.tableNameOrRegionName, function (err, result) {
    var result = new Hbase_majorCompact_result((err != null ? err : {success: result}));
    output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getTableNames = function(seqid, input, output) {
  var args = new Hbase_getTableNames_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTableNames(function (err, result) {
    var result = new Hbase_getTableNames_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getColumnDescriptors = function(seqid, input, output) {
  var args = new Hbase_getColumnDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getColumnDescriptors(args.tableName, function (err, result) {
    var result = new Hbase_getColumnDescriptors_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getTableRegions = function(seqid, input, output) {
  var args = new Hbase_getTableRegions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTableRegions(args.tableName, function (err, result) {
    var result = new Hbase_getTableRegions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new Hbase_createTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createTable(args.tableName, args.columnFamilies, function (err, result) {
    var result = new Hbase_createTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new Hbase_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteTable(args.tableName, function (err, result) {
    var result = new Hbase_deleteTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Hbase_get_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get(args.tableName, args.row, args.column, args.attributes, function (err, result) {
    var result = new Hbase_get_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getVer = function(seqid, input, output) {
  var args = new Hbase_getVer_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getVer(args.tableName, args.row, args.column, args.numVersions, args.attributes, function (err, result) {
    var result = new Hbase_getVer_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getVerTs = function(seqid, input, output) {
  var args = new Hbase_getVerTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes, function (err, result) {
    var result = new Hbase_getVerTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Hbase_getRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRow(args.tableName, args.row, args.attributes, function (err, result) {
    var result = new Hbase_getRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowWithColumns(args.tableName, args.row, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_getRowWithColumns_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowTs = function(seqid, input, output) {
  var args = new Hbase_getRowTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowTs(args.tableName, args.row, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowWithColumnsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRows = function(seqid, input, output) {
  var args = new Hbase_getRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRows(args.tableName, args.rows, args.attributes, function (err, result) {
    var result = new Hbase_getRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowsWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowsWithColumns(args.tableName, args.rows, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_getRowsWithColumns_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowsTs(args.tableName, args.rows, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowsWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowsWithColumnsTs(args.tableName, args.rows, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowsWithColumnsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new Hbase_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRow(args.tableName, args.row, args.mutations, args.attributes, function (err, result) {
    var result = new Hbase_mutateRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRowTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_mutateRowTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRows = function(seqid, input, output) {
  var args = new Hbase_mutateRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRows(args.tableName, args.rowBatches, args.attributes, function (err, result) {
    var result = new Hbase_mutateRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRowsTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_mutateRowsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_atomicIncrement = function(seqid, input, output) {
  var args = new Hbase_atomicIncrement_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.atomicIncrement(args.tableName, args.row, args.column, args.value, function (err, result) {
    var result = new Hbase_atomicIncrement_result((err != null ? err : {success: result}));
    output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new Hbase_deleteAll_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAll(args.tableName, args.row, args.column, args.attributes, function (err, result) {
    var result = new Hbase_deleteAll_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_deleteAllTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllRow = function(seqid, input, output) {
  var args = new Hbase_deleteAllRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllRow(args.tableName, args.row, args.attributes, function (err, result) {
    var result = new Hbase_deleteAllRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new Hbase_increment_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.increment(args.increment, function (err, result) {
    var result = new Hbase_increment_result((err != null ? err : {success: result}));
    output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_incrementRows = function(seqid, input, output) {
  var args = new Hbase_incrementRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.incrementRows(args.increments, function (err, result) {
    var result = new Hbase_incrementRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllRowTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllRowTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllRowTs(args.tableName, args.row, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_deleteAllRowTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithScan = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithScan_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithScan(args.tableName, args.scan, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithScan_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpen = function(seqid, input, output) {
  var args = new Hbase_scannerOpen_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpen(args.tableName, args.startRow, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpen_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStop = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStop_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithStop_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithPrefix = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithPrefix_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStopTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithStopTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerGet = function(seqid, input, output) {
  var args = new Hbase_scannerGet_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerGet(args.id, function (err, result) {
    var result = new Hbase_scannerGet_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerGetList = function(seqid, input, output) {
  var args = new Hbase_scannerGetList_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerGetList(args.id, args.nbRows, function (err, result) {
    var result = new Hbase_scannerGetList_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerClose = function(seqid, input, output) {
  var args = new Hbase_scannerClose_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerClose(args.id, function (err, result) {
    var result = new Hbase_scannerClose_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowOrBefore = function(seqid, input, output) {
  var args = new Hbase_getRowOrBefore_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowOrBefore(args.tableName, args.row, args.family, function (err, result) {
    var result = new Hbase_getRowOrBefore_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRegionInfo = function(seqid, input, output) {
  var args = new Hbase_getRegionInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegionInfo(args.row, function (err, result) {
    var result = new Hbase_getRegionInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}
